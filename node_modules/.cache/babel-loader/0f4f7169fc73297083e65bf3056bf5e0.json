{"ast":null,"code":"import locationHelperBuilder from \"redux-auth-wrapper/history4/locationHelper\";\nimport { connectedRouterRedirect } from \"redux-auth-wrapper/history4/redirect\"; //import createHistory from \"history/createBrowserHistory\";\n\nimport LoadingScreen from \"../components/layout/Spinner\"; // change it to your custom component\n\nvar locationHelper = locationHelperBuilder({}); // const history = createHistory();\n\nexport var UserIsAuthenticated = connectedRouterRedirect({\n  wrapperDisplayName: \"UserIsAuthenticated\",\n  AuthenticatingComponent: LoadingScreen,\n  allowRedirectBack: true,\n  redirectPath: function redirectPath(state, ownProps) {\n    return locationHelper.getRedirectQueryParam(ownProps) || \"/login\";\n  },\n  authenticatingSelector: function authenticatingSelector(_ref) {\n    var _ref$firebase = _ref.firebase,\n        auth = _ref$firebase.auth,\n        profile = _ref$firebase.profile,\n        isInitializing = _ref$firebase.isInitializing;\n    return !auth.isLoaded || isInitializing === true;\n  },\n  authenticatedSelector: function authenticatedSelector(_ref2) {\n    var auth = _ref2.firebase.auth;\n    return auth.isLoaded && !auth.isEmpty;\n  }\n});\nexport var UserIsNotAuthenticated = connectedRouterRedirect({\n  wrapperDisplayName: \"UserIsNotAuthenticated\",\n  AuthenticatingComponent: LoadingScreen,\n  allowRedirectBack: false,\n  redirectPath: function redirectPath(state, ownProps) {\n    return locationHelper.getRedirectQueryParam(ownProps) || \"/\";\n  },\n  authenticatingSelector: function authenticatingSelector(_ref3) {\n    var _ref3$firebase = _ref3.firebase,\n        auth = _ref3$firebase.auth,\n        isInitializing = _ref3$firebase.isInitializing;\n    return !auth.isLoaded || isInitializing === true;\n  },\n  authenticatedSelector: function authenticatedSelector(_ref4) {\n    var auth = _ref4.firebase.auth;\n    return auth.isLoaded && auth.isEmpty;\n  }\n}); //remove redirectAction because not in use","map":{"version":3,"sources":["/Users/HeSong/Desktop/react_clientpanel/src/helper/Auth.js"],"names":["locationHelperBuilder","connectedRouterRedirect","LoadingScreen","locationHelper","UserIsAuthenticated","wrapperDisplayName","AuthenticatingComponent","allowRedirectBack","redirectPath","state","ownProps","getRedirectQueryParam","authenticatingSelector","firebase","auth","profile","isInitializing","isLoaded","authenticatedSelector","isEmpty","UserIsNotAuthenticated"],"mappings":"AAAA,OAAOA,qBAAP,MAAkC,4CAAlC;AACA,SAASC,uBAAT,QAAwC,sCAAxC,C,CACA;;AACA,OAAOC,aAAP,MAA0B,8BAA1B,C,CAA0D;;AAE1D,IAAMC,cAAc,GAAGH,qBAAqB,CAAC,EAAD,CAA5C,C,CACA;;AAEA,OAAO,IAAMI,mBAAmB,GAAGH,uBAAuB,CAAC;AACzDI,EAAAA,kBAAkB,EAAE,qBADqC;AAEzDC,EAAAA,uBAAuB,EAAEJ,aAFgC;AAGzDK,EAAAA,iBAAiB,EAAE,IAHsC;AAIzDC,EAAAA,YAAY,EAAE,sBAACC,KAAD,EAAQC,QAAR;AAAA,WACZP,cAAc,CAACQ,qBAAf,CAAqCD,QAArC,KAAkD,QADtC;AAAA,GAJ2C;AAMzDE,EAAAA,sBAAsB,EAAE;AAAA,6BAAGC,QAAH;AAAA,QAAeC,IAAf,iBAAeA,IAAf;AAAA,QAAqBC,OAArB,iBAAqBA,OAArB;AAAA,QAA8BC,cAA9B,iBAA8BA,cAA9B;AAAA,WACtB,CAACF,IAAI,CAACG,QAAN,IAAkBD,cAAc,KAAK,IADf;AAAA,GANiC;AAQzDE,EAAAA,qBAAqB,EAAE;AAAA,QAAeJ,IAAf,SAAGD,QAAH,CAAeC,IAAf;AAAA,WACrBA,IAAI,CAACG,QAAL,IAAiB,CAACH,IAAI,CAACK,OADF;AAAA;AARkC,CAAD,CAAnD;AAYP,OAAO,IAAMC,sBAAsB,GAAGnB,uBAAuB,CAAC;AAC5DI,EAAAA,kBAAkB,EAAE,wBADwC;AAE5DC,EAAAA,uBAAuB,EAAEJ,aAFmC;AAG5DK,EAAAA,iBAAiB,EAAE,KAHyC;AAI5DC,EAAAA,YAAY,EAAE,sBAACC,KAAD,EAAQC,QAAR;AAAA,WACZP,cAAc,CAACQ,qBAAf,CAAqCD,QAArC,KAAkD,GADtC;AAAA,GAJ8C;AAM5DE,EAAAA,sBAAsB,EAAE;AAAA,+BAAGC,QAAH;AAAA,QAAeC,IAAf,kBAAeA,IAAf;AAAA,QAAqBE,cAArB,kBAAqBA,cAArB;AAAA,WACtB,CAACF,IAAI,CAACG,QAAN,IAAkBD,cAAc,KAAK,IADf;AAAA,GANoC;AAQ5DE,EAAAA,qBAAqB,EAAE;AAAA,QAAeJ,IAAf,SAAGD,QAAH,CAAeC,IAAf;AAAA,WACrBA,IAAI,CAACG,QAAL,IAAiBH,IAAI,CAACK,OADD;AAAA;AARqC,CAAD,CAAtD,C,CAYP","sourcesContent":["import locationHelperBuilder from \"redux-auth-wrapper/history4/locationHelper\";\nimport { connectedRouterRedirect } from \"redux-auth-wrapper/history4/redirect\";\n//import createHistory from \"history/createBrowserHistory\";\nimport LoadingScreen from \"../components/layout/Spinner\"; // change it to your custom component\n\nconst locationHelper = locationHelperBuilder({});\n// const history = createHistory();\n\nexport const UserIsAuthenticated = connectedRouterRedirect({\n  wrapperDisplayName: \"UserIsAuthenticated\",\n  AuthenticatingComponent: LoadingScreen,\n  allowRedirectBack: true,\n  redirectPath: (state, ownProps) =>\n    locationHelper.getRedirectQueryParam(ownProps) || \"/login\",\n  authenticatingSelector: ({ firebase: { auth, profile, isInitializing } }) =>\n    !auth.isLoaded || isInitializing === true,\n  authenticatedSelector: ({ firebase: { auth } }) =>\n    auth.isLoaded && !auth.isEmpty\n});\n\nexport const UserIsNotAuthenticated = connectedRouterRedirect({\n  wrapperDisplayName: \"UserIsNotAuthenticated\",\n  AuthenticatingComponent: LoadingScreen,\n  allowRedirectBack: false,\n  redirectPath: (state, ownProps) =>\n    locationHelper.getRedirectQueryParam(ownProps) || \"/\",\n  authenticatingSelector: ({ firebase: { auth, isInitializing } }) =>\n    !auth.isLoaded || isInitializing === true,\n  authenticatedSelector: ({ firebase: { auth } }) =>\n    auth.isLoaded && auth.isEmpty\n});\n\n//remove redirectAction because not in use\n"]},"metadata":{},"sourceType":"module"}